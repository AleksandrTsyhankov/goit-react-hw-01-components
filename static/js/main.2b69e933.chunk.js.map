{"version":3,"sources":["social-profile/ProfileStyles.module.css","friend-list/FriendListStyles.module.css","statistics/StatisticsStyles.module.css","transaction-history/TransactionHistoryStyles.module.css","friend-list/FriendList.jsx","social-profile/Profile.jsx","statistics/Statistics.jsx","transaction-history/TransactionHistory.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FriendList","friends","className","map","id","avatar","name","isOnline","s","item","green","red","src","alt","width","Profile","tag","location","stats","profile","description","label","followers","views","likes","Statistics","statistic","title","statList","percentage","style","backgroundColor","Math","random","toString","substring","toUpperCase","TransactionHistory","transactions","transactionHistory","tableHead","type","amount","currency","tableItem","App","display","flexDirection","alignItems","user","statisticalData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b69e933.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileStyles_description__3QgS_\",\"profile\":\"ProfileStyles_profile__3QmMX\",\"label\":\"ProfileStyles_label__2olIF\",\"stats\":\"ProfileStyles_stats__25uXc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"FriendListStyles_red__3mO6y\",\"green\":\"FriendListStyles_green__2Q5X6\",\"item\":\"FriendListStyles_item__3qaqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"StatisticsStyles_stats__3tuAx\",\"statList\":\"StatisticsStyles_statList__N-sj5\",\"item\":\"StatisticsStyles_item__3K3eA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistoryStyles_transactionHistory__wenIE\",\"tableHead\":\"TransactionHistoryStyles_tableHead__1Dt2L\",\"tableItem\":\"TransactionHistoryStyles_tableItem__14aTm\"};","import PropTypes from \"prop-types\";\r\nimport s from './FriendListStyles.module.css';\r\n\r\nconst FriendList = ({ friends }) => {\r\n  return (\r\n    <ul className=\"friend-list\">\r\n      {\r\n        friends.map(({ id, avatar, name, isOnline }) => (\r\n          <li className={s.item} key={id} >\r\n            <span className={isOnline ? s.green : s.red}></span>\r\n            <img className=\"avatar\" src={avatar} alt={name} width=\"48\" />\r\n            <p className=\"name\">{name}</p>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFriendList.propTypes = {\r\n  friends: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      avatar: PropTypes.string,\r\n      name: PropTypes.string,\r\n      isOnline: PropTypes.bool,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default FriendList;","import PropTypes from \"prop-types\";\r\nimport s from './ProfileStyles.module.css';\r\n\r\nconst Profile = ({ name, tag, location, avatar, stats }) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.description}>\r\n                <img\r\n                    src={avatar}\r\n                    alt={name}\r\n                    className=\"avatar\"\r\n                />\r\n                <p className=\"name\">{name}</p>\r\n                <p className=\"tag\">@{tag}</p>\r\n                <p className=\"location\">{location}</p>\r\n            </div>\r\n\r\n            <ul className={s.stats}>\r\n                <li>\r\n                    <span className={s.label}>Followers: </span>\r\n                    <span className=\"quantity\">{stats.followers}</span>\r\n                </li>\r\n                <li>\r\n                    <span className={s.label}>Views: </span>\r\n                    <span className=\"quantity\">{stats.views}</span>\r\n                </li>\r\n                <li>\r\n                    <span className={s.label}>Likes: </span>\r\n                    <span className=\"quantity\">{stats.likes}</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nProfile.propTypes = {\r\n  name: PropTypes.string,\r\n  tag: PropTypes.string,\r\n  location: PropTypes.string,\r\n  avatar: PropTypes.string,\r\n  stats: PropTypes.object,\r\n};\r\n\r\n\r\n\r\nexport default Profile;","import PropTypes from \"prop-types\";\r\nimport s from './StatisticsStyles.module.css';\r\n\r\nconst Statistics = ({ statistic, title }) => {\r\n    return (\r\n        <section className={s.stats}>\r\n            {title && <h2 className=\"title\">{title}</h2>}\r\n\r\n            <ul className={s.statList}>\r\n            \r\n                {statistic.map(({ id, label, percentage }) => (\r\n                    <li className={s.item} key={id} style={{ backgroundColor: '#' + (Math.random().toString(16) + '000000').substring(2, 8).toUpperCase() }}>\r\n                        <span className=\"label\">{label}</span>\r\n                        <span className=\"percentage\">{percentage}</span>\r\n                    </li>\r\n                ))}\r\n            \r\n            </ul>\r\n        </section>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n statistic: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      percentage: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n  title:PropTypes.string,\r\n};\r\n\r\n\r\n\r\nexport default Statistics;","import PropTypes from \"prop-types\";\r\nimport s from './TransactionHistoryStyles.module.css';\r\n\r\nconst TransactionHistory = ({ transactions }) => {\r\n    return (\r\n        <table className={s.transactionHistory}>\r\n        <thead>\r\n            <tr className={s.tableHead}>\r\n                <th>Type</th>\r\n                <th>Amount</th>\r\n                <th>Currency</th>\r\n            </tr>\r\n        </thead>\r\n        {transactions.map(({ id, type, amount, currency }) => (\r\n            <thead key={id}>\r\n                <tr className={s.tableItem}>\r\n                    <th>{type}</th>\r\n                    <th>{amount}</th>\r\n                    <th>{currency}</th>\r\n                </tr>\r\n            </thead>\r\n        ))}\r\n    </table>\r\n    );\r\n};\r\n\r\nTransactionHistory.propTypes = {\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      amount: PropTypes.string.isRequired,\r\n      currency: PropTypes.string.isRequired,\r\n    })\r\n  )\r\n};\r\n\r\n\r\n\r\nexport default TransactionHistory;","import friends from './friend-list/friends.json';\nimport user from './social-profile/user.json';\nimport statisticalData from './statistics/statistical-data.json';\nimport transactions from './transaction-history/transactions.json';\n\nimport FriendList from './friend-list/FriendList';\nimport Profile from './social-profile/Profile';\nimport Statistics from './statistics/Statistics';\nimport TransactionHistory from './transaction-history/TransactionHistory';\n\n\nfunction App() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />;\n      <Statistics title=\"UPLOAD STATS\" statistic={statisticalData} />;\n      <FriendList friends={friends} />;\n      <TransactionHistory transactions={transactions} />;\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}